#r = ifelse(test = indicadora,yes = 2*x + 2*y -4*x*y,no = 0) # si test es TRUE, retorna lo que hay en yes, sino lo que hay en no
r = ifelse(test = indicadora,yes = 3/2*(x**2+y**2),no = 0) # si test es TRUE, retorna lo que hay en yes, sino lo que hay en no
return(r)
}
require(plot3D) # Los gráficos 3D son medio una porquería pero bueno
X = seq(0,1,.05) # Armo ambas secuencias de valores de X e Y
Y = seq(0,1,.05)
XY = mesh(X,Y) # Esto es parecido al expand.grid, pero lo que hace es armar dos matrices X e Y con las combinaciones de valores sobre un cuadrante
Z = f_XY(XY$x,XY$y)
surf3D(x=XY$x,y=XY$y,z=Z,bty='b',theta=0,phi=45) # bty='b' pone los ejes. Cambiar theta (y phi), permite cambiar el ángulo con el que se mira
rm(list=c('X','Y','XY','Z')) # Borro todo para liberar espacio
# Para armar f_X usamos integrate. El truco está en en darle una función que tenga por primer argumento la varible de integración
# El segundo argumento sirve de parámetro. En este caso, usamos cada x como parámetro y hacemos la integral.
# La integral es entre lower y upper. Y recuerden que $value sirve para quedarnos sólo con el número
# Recuerden que esto solo da un indicio de la distribución. Para saber cuál es exactamente hay que integrar a mano!
f_X = function(x){
integrate(f=function(y,x) f_XY(x,y),x=x,lower = 0,upper = 1)$value
}
# Lo malo es que esta función sólo puede recibir un valor de x por vez. Con Vectorize permitimos que reciba multiples x
f_X = Vectorize(f_X)
X = seq(0,1,0.1)
plot(X,f_X(X),type='l')
f_Y = function(y){
integrate(f=function(x,y) f_XY(x,y),y=y,lower = 0,upper = 1)$value
}
f_Y = Vectorize(f_Y)
Y = seq(0,1,0.1)
plot(Y,f_Y(Y),type='l')
# Para calcular la esperanza de una g(X), usamos la f_X(x), y hacemos la integral de x*f_X(x)
EX = integrate(f=function(x) x*f_X(x),lower=0,upper=1)$value
EY = integrate(f=function(y) y*f_X(y),lower=0,upper=1)$value
VX = integrate(f=function(x) x**2*f_X(x),lower=0,upper=1)$value
VY = integrate(f=function(y) y**2*f_X(y),lower=0,upper=1)$value
VX = VX-EX**2
VY = VY-EY**2
## Para EXY tenemos que armar algo más peliagudo
## Armamos una función intermedia "f" que sea el resultado de integrar x*f_XY(x,y) dx (es una función de y)
# Y luego integramos esa función multiplicada por y
# Armamos
f = function(y) integrate(function(x,yi)
x*f_XY(x,yi),
yi=y,
lower=0,
upper=1)$value
# Si todo está en una linea, no hacen falta las llaves
f = Vectorize(f)
EXY = integrate(f=function(y)
y*f(y),
lower=0,
upper=1)$value
covXY = EXY-EX*EY
corXY = covXY/sqrt(VX*VY)
EX_t = 1/2
EY_t = 1/2
VX_t = 1/12
VY_t = 1/12
EXY_t = 1/3-1/9
covXY_t = EXY_t-EX_t*EY_t
corXY_t = covXY_t/sqrt(VX_t*VY_t)
print(covXY)
print(covXY_t)
f = function(x,c=1){
x**2 + c
}
f_n = function(x,n=2,c=1){
r = x
while(k<n){
r = f(r)
k = k +1
}
return(r)
}
xs = sapply(1:2e2,function(i){
f_n(x,n=Niter,c=3)
})
x0 = 1
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=3)
})
f = function(x,c=1){
x**2 + c
}
f_n = function(x,n=2,c=1){
r = x
k = 0
while(k<n){
r = f(r)
k = k +1
}
return(r)
}
Niter = 1e3
x0 = 1
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=3)
})
plot(xs)
xs
Niter = 1e3
x0 = 1
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=1)
})
plot(xs)
xs
Niter = 1e3
x0 = 1
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=.5)
})
plot(xs)
Niter = 1e3
x0 = 0
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=.5)
})
plot(xs)
xs
x0 = sqrt(1-4*c)
c = 1
x0 = sqrt(1-4*c)
c = 1/4
x0 = sqrt(1-4*c)
Niter = 1e3
x0 = 1
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=.15)
})
plot(xs)
xs
x0 = 0
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=.15)
})
plot(xs)
f = function(x,c=1){
x**2 + c
}
f_n = function(x,n=2,c=1){
r = x
k = 0
while(k<n){
r = f(r,c=c)
k = k +1
}
return(r)
}
Niter = 1e3
x0 = 0
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=.15)
})
plot(xs)
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=1)
})
plot(xs)
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=1/4)
})
plot(xs)
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=-1)
})
plot(xs)
Niter = 1e3
x0 = 1
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=-1)
})
plot(xs)
x0 = 2
xs = sapply(1:2e2,function(i){
f_n(x0,n=Niter,c=-1)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-1)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-2)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-6/4)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-1e3)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-1e-3)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-2e-3)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-3e-3)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-5e-3)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-7e-3)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-1e-2)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-5e-2)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-1e-1)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-2e-1)
})
plot(xs)
xs = sapply(1:2e2,function(i){
x0 = runif(n=1,-5,5)
f_n(x0,n=Niter,c=-5/4-1.5e-1)
})
plot(xs)
### En este ejercicio, el desafío es como generar muestras
### Para la distribución
### Tarea: mostrar que si Y~U[0,1],
# X = theta * X^{1/2} tiene la distribución del ejercicio.
# Fijemos para el ejercicio:
thetaT = 5
y = runif(1e3)
F = function(x,X){
mean(X<=x)
}
F = Vectorize(F,vectorize.args = 'x')
x_= seq(0,thetaT,length.out = 100)
plot(x_,F(x_,thetaT*(y)**.5))
lines(x_,x_**2/thetaT**2,col='red',lwd=2)
### Entonces, para muestrear X
rX = function(n=10,theta=5){
x = runif(n=n)
return(thetaT*(x)**.5)
}
X =rX(1e3,theta=thetaT)
plot(x_,F(x_,X))
lines(x_,x_**2/thetaT**2,col='red',lwd=2)
# Estimemos el sesgo y varianza en función de N
Ns = c(1e1,2e1,5e1,1e2,5e2,1e3,2e3)
thetaMV=sapply(Ns,function(N){
thetas = sapply(1:1e2,function(i){
X = rX(N,thetaT)
r = max(X)
return(r)
})
return(c(mean(thetas),var(thetas)))
})
plot(Ns,(Ns/(Ns+.5)-1)*thetaT,type='l',ylab='Sesgo')
points(Ns,thetaMV[1,]-thetaT)
plot(Ns,(Ns/(Ns+1)-Ns**2 / (Ns + .5)**2)*thetaT**2,type='l',ylab='Varianza')
points(Ns,thetaMV[2,])
plot(Ns,thetaMV[2,] + (thetaMV[1,]-thetaT)**2)
plot(Ns,(2*Ns/(2*Ns+2)-(2*Ns/(2*Ns+1))**2 + 1/(2*Ns+1)**2  )*thetaT**2,type='l',ylab='ECM')
points(Ns,thetaMV[2,] + (thetaMV[1,]-thetaT)**2)
plot(Ns,(2*Ns/(2*Ns+2)-(2*Ns/(2*Ns+1))**2 + 1/(2*Ns+1)**2  )*thetaT**2,type='l',ylab='ECM',log='y')
points(Ns,thetaMV[2,] + (thetaMV[1,]-thetaT)**2)
plot(Ns,(Ns/(Ns+1)-Ns**2 / (Ns + .5)**2)*thetaT**2,type='l',ylab='Varianza',log='y')
points(Ns,thetaMV[2,])
(thetaMV[1,]-thetaT)**2
thetaMV[2,]
# Probemoslo para una muestra dada:
N=10
N
X = rX(N,thetaT)
X
thetaEst = max(X)
thetaEst
X0 = 1/2
thetaEst = max(X)
FEmp = mean(X>=.5)
FEmp
### En este ejercicio, el desafío es como generar muestras
### Para la distribución
### Tarea: mostrar que si Y~U[0,1],
# X = theta * X^{1/2} tiene la distribución del ejercicio.
# Fijemos para el ejercicio:
thetaT = 2
y = runif(1e3)
F = function(x,X){
mean(X<=x)
}
F = Vectorize(F,vectorize.args = 'x')
x_= seq(0,thetaT,length.out = 100)
plot(x_,F(x_,thetaT*(y)**.5))
lines(x_,x_**2/thetaT**2,col='red',lwd=2)
### Entonces, para muestrear X
rX = function(n=10,theta=5){
x = runif(n=n)
return(thetaT*(x)**.5)
}
X =rX(1e3,theta=thetaT)
plot(x_,F(x_,X))
lines(x_,x_**2/thetaT**2,col='red',lwd=2)
# Estimemos el sesgo y varianza en función de N
Ns = c(1e1,2e1,5e1,1e2,5e2,1e3,2e3)
thetaMV=sapply(Ns,function(N){
thetas = sapply(1:1e2,function(i){
X = rX(N,thetaT)
r = max(X)
return(r)
})
return(c(mean(thetas),var(thetas)))
})
plot(Ns,(Ns/(Ns+.5)-1)*thetaT,type='l',ylab='Sesgo')
points(Ns,thetaMV[1,]-thetaT)
plot(Ns,(Ns/(Ns+1)-Ns**2 / (Ns + .5)**2)*thetaT**2,type='l',ylab='Varianza',log='y')
points(Ns,thetaMV[2,])
plot(Ns,(2*Ns/(2*Ns+2)-(2*Ns/(2*Ns+1))**2 + 1/(2*Ns+1)**2  )*thetaT**2,type='l',ylab='ECM',log='y')
points(Ns,thetaMV[2,] + (thetaMV[1,]-thetaT)**2)
# Probemoslo para una muestra dada:
N=10
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X>=.5)
FEmp
X
FMV = 1/(4*max(X)**2)
FMV
# Probemoslo para una muestra dada:
N=100
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X>=.5)
FMV = 1/(4*max(X)**2)
FEmp
FMV
FEmp = mean(X<=.5)
FEmp
# Probemoslo para una muestra dada:
N=10
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X<=.5)
FMV = 1/(4*max(X)**2)
FEmp
FMV = 1/(4*max(X)**2)
FMV
# Probemoslo para una muestra dada:
N=100
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X<=.5)
FMV = 1/(4*max(X)**2)
print(FEmp)
print(FMV)
# Probemoslo para una muestra dada:
N=1e3
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X<=.5)
FMV = 1/(4*max(X)**2)
print(FEmp)
print(FMV)
# Probemoslo para una muestra dada:
N=1e4
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X<=.5)
FMV = 1/(4*max(X)**2)
print(FEmp)
print(FMV)
# Probemoslo para una muestra dada:
N=1e5
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X<=1/2)
FMV = 1/(4*max(X)**2)
print(FEmp)
print(FMV)
print(FEmp)
FTrue = 1/(4*thetaT**2)
print(FTrue)
estimados = sapply(1:1e2,function(i){
X = rX(N,thetaT)
r = c(1/(4*max(X)**2),mean(X<=1/2))
return(r)
})
estimados
F0.5=sapply(Ns,function(N){
estimados = sapply(1:1e2,function(i){
X = rX(N,thetaT)
r = c(1/(4*max(X)**2),mean(X<=1/2))
return(r)
})
real = 1/(4*thetaT**2)
return(c(mean((estimados[1,]-real)**2),mean((estimados[2,]-real)**2)))
})
F0.5
plot(Ns,F0.5[1,])
plot(Ns,F0.5[1,],type='l',col='red',ylab='ECM')
plot(Ns,F0.5[1,],type='l',col='red',ylab='ECM',log='xy')
lines(Ns,F0.5[2,],type='l',col='blue')
plot(Ns,F0.5[1,],type='l',col='red',ylab='ECM',log='xy',ylim=range(F0.5))
lines(Ns,F0.5[2,],type='l',col='blue')
legend('bottomleft',legend=c('MV','FEmpirica'),col=c('red','blue'),lty='solid')
F0.5=sapply(Ns,function(N){
estimados = sapply(1:5e2,function(i){
X = rX(N,thetaT)
r = c(1/(4*max(X)**2),mean(X<=1/2))
return(r)
})
real = 1/(4*thetaT**2)
return(c(mean((estimados[1,]-real)**2),mean((estimados[2,]-real)**2)))
})
plot(Ns,F0.5[1,],type='l',col='red',ylab='ECM',log='xy',ylim=range(F0.5))
lines(Ns,F0.5[2,],type='l',col='blue')
# Probemoslo para una muestra dada:
thetaT = 10
N=1e5
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X<=1/2)
FMV = 1/(4*max(X)**2)
FTrue = 1/(4*thetaT**2)
print(FEmp)
print(FMV)
# Probemoslo para una muestra dada:
thetaT = 10
N=1e1
X0 = 1/2
X = rX(N,thetaT)
thetaEst = max(X)
FEmp = mean(X<=1/2)
FMV = 1/(4*max(X)**2)
FTrue = 1/(4*thetaT**2)
print(FEmp)
print(FMV)
print(FTrue)
F0.5=sapply(Ns,function(N){
estimados = sapply(1:5e2,function(i){
X = rX(N,thetaT)
r = c(1/(4*max(X)**2),mean(X<=1/2))
return(r)
})
real = 1/(4*thetaT**2)
return(c(mean((estimados[1,]-real)**2),mean((estimados[2,]-real)**2)))
})
plot(Ns,F0.5[1,],type='l',col='red',ylab='ECM',log='xy',ylim=range(F0.5))
lines(Ns,F0.5[2,],type='l',col='blue')
10.96/6
1/11
((30.33+1)/512)**(1/3)
30.33/8
8**3
u = 30.33/8
(4**3-1)/(512*u**3-1)
11/14
6.07-2
u = 6.07-2
(5**2-1)/(u**2-1)
u = 3.92-1
(3**2-1)/(u**2-1)
(3**2-1)/((u+1)**2-1)
u
9/15
u = 7.91-4
u
4**3/(u+4)**3
setwd("~/LABURO/taller de datos populares")
require(leaflet)
require(osmdata)
require(sf)
install.packages('rgdal')
